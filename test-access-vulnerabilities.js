/**
 * üîç AUDITORIA DE VULNERABILIDADES DE ACESSO E AUTORIZA√á√ÉO
 * Testa se usu√°rios n√£o logados conseguem acessar dados que n√£o deveriam
 */

const BASE_URL = 'http://localhost:5000';

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const log = (color, message) => console.log(`${colors[color]}${message}${colors.reset}`);

async function makeRequest(endpoint, method = 'GET', body = null, headers = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...headers
    }
  };
  
  if (body) {
    options.body = JSON.stringify(body);
  }
  
  try {
    const response = await fetch(url, options);
    const data = await response.text();
    
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      status: response.status,
      headers: Object.fromEntries(response.headers.entries()),
      data: jsonData
    };
  } catch (error) {
    return {
      status: 0,
      error: error.message
    };
  }
}

// üö® TESTE 1: Acesso a detalhes de pedidos sem autentica√ß√£o
async function testOrderDetailsAccess() {
  log('blue', '\nüö® TESTE 1: ACESSO A DETALHES DE PEDIDOS SEM LOGIN');
  log('yellow', 'üìã Testando se usu√°rios n√£o logados conseguem ver detalhes de pedidos...\n');
  
  const vulnerabilities = [];
  
  // Testar acesso a pedidos por ID (1, 2, 3, 4, 5)
  for (let orderId = 1; orderId <= 5; orderId++) {
    const response = await makeRequest(`/api/orders/${orderId}`);
    
    if (response.status === 200 && response.data && typeof response.data === 'object') {
      log('red', `‚ùå VULNERABILIDADE: Pedido ${orderId} acess√≠vel sem login!`);
      log('yellow', `   Dados expostos: ${JSON.stringify(response.data).substring(0, 100)}...`);
      vulnerabilities.push(`Order ${orderId} details accessible without authentication`);
    } else {
      log('green', `‚úÖ Pedido ${orderId}: ${response.status === 404 ? 'N√£o encontrado' : `Protegido (Status: ${response.status})`}`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 2: Acesso a pedidos por n√∫mero de pedido
async function testOrderByNumberAccess() {
  log('blue', '\nüö® TESTE 2: ACESSO A PEDIDOS POR N√öMERO');
  log('yellow', 'üìã Testando se n√∫meros de pedidos s√£o acess√≠veis publicamente...\n');
  
  const vulnerabilities = [];
  
  // Testar padr√µes comuns de n√∫meros de pedidos
  const orderNumbers = [
    'KR2025000001',
    'KR2025000002', 
    'KR2025000003',
    'KR2024000001',
    'KR2025123456'
  ];
  
  for (const orderNumber of orderNumbers) {
    const response = await makeRequest(`/api/orders/number/${orderNumber}`);
    
    if (response.status === 200 && response.data && typeof response.data === 'object') {
      log('red', `‚ùå VULNERABILIDADE: Pedido ${orderNumber} acess√≠vel sem login!`);
      vulnerabilities.push(`Order ${orderNumber} accessible by number without authentication`);
    } else {
      log('green', `‚úÖ Pedido ${orderNumber}: Protegido ou n√£o existe (Status: ${response.status})`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 3: Acesso a dados de clientes
async function testCustomerDataAccess() {
  log('blue', '\nüö® TESTE 3: ACESSO A DADOS DE CLIENTES');
  log('yellow', 'üìã Testando se dados pessoais de clientes s√£o acess√≠veis...\n');
  
  const vulnerabilities = [];
  
  // Testar acesso a dados de clientes por ID
  for (let customerId = 1; customerId <= 5; customerId++) {
    const response = await makeRequest(`/api/customers/${customerId}`);
    
    if (response.status === 200 && response.data && typeof response.data === 'object') {
      log('red', `‚ùå VULNERABILIDADE: Dados do cliente ${customerId} expostos!`);
      if (response.data.cpf) {
        log('red', `   CPF exposto: ${response.data.cpf.substring(0, 3)}***`);
      }
      vulnerabilities.push(`Customer ${customerId} data accessible without authentication`);
    } else {
      log('green', `‚úÖ Cliente ${customerId}: Protegido (Status: ${response.status})`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 4: Acesso a endere√ßos de clientes
async function testAddressAccess() {
  log('blue', '\nüö® TESTE 4: ACESSO A ENDERE√áOS');
  log('yellow', 'üìã Testando se endere√ßos de clientes s√£o acess√≠veis...\n');
  
  const vulnerabilities = [];
  
  for (let addressId = 1; addressId <= 5; addressId++) {
    const response = await makeRequest(`/api/addresses/${addressId}`);
    
    if (response.status === 200 && response.data && typeof response.data === 'object') {
      log('red', `‚ùå VULNERABILIDADE: Endere√ßo ${addressId} acess√≠vel sem login!`);
      vulnerabilities.push(`Address ${addressId} accessible without authentication`);
    } else {
      log('green', `‚úÖ Endere√ßo ${addressId}: Protegido (Status: ${response.status})`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 5: Acesso a hist√≥rico de status
async function testOrderHistoryAccess() {
  log('blue', '\nüö® TESTE 5: ACESSO A HIST√ìRICO DE STATUS');
  log('yellow', 'üìã Testando se hist√≥rico de pedidos √© acess√≠vel...\n');
  
  const vulnerabilities = [];
  
  for (let orderId = 1; orderId <= 5; orderId++) {
    const response = await makeRequest(`/api/orders/${orderId}/status-history`);
    
    if (response.status === 200 && response.data && Array.isArray(response.data.history)) {
      log('red', `‚ùå VULNERABILIDADE: Hist√≥rico do pedido ${orderId} acess√≠vel!`);
      vulnerabilities.push(`Order ${orderId} status history accessible without authentication`);
    } else {
      log('green', `‚úÖ Hist√≥rico ${orderId}: Protegido (Status: ${response.status})`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 6: Acesso a rotas administrativas
async function testAdminAccess() {
  log('blue', '\nüö® TESTE 6: ACESSO A ROTAS ADMINISTRATIVAS');
  log('yellow', 'üìã Testando se p√°ginas de admin s√£o acess√≠veis sem autentica√ß√£o...\n');
  
  const vulnerabilities = [];
  
  const adminRoutes = [
    '/api/admin/customers',
    '/api/admin/orders', 
    '/api/admin/events',
    '/api/admin/stats',
    '/api/admin/reports/events',
  ];
  
  for (const route of adminRoutes) {
    const response = await makeRequest(route);
    
    if (response.status === 200 && response.data) {
      log('red', `‚ùå VULNERABILIDADE CR√çTICA: Rota admin acess√≠vel: ${route}`);
      vulnerabilities.push(`Admin route ${route} accessible without authentication`);
    } else {
      log('green', `‚úÖ ${route}: Protegido (Status: ${response.status})`);
    }
  }
  
  return vulnerabilities;
}

// üö® TESTE 7: Enumera√ß√£o de dados
async function testDataEnumeration() {
  log('blue', '\nüö® TESTE 7: ENUMERA√á√ÉO DE DADOS');
  log('yellow', 'üìã Testando se √© poss√≠vel enumerar todos os dados...\n');
  
  const vulnerabilities = [];
  
  // Testar se √© poss√≠vel listar todos os eventos, clientes, etc.
  const routes = [
    { path: '/api/events', name: 'Events' },
    { path: '/api/customers', name: 'Customers' },
    { path: '/api/orders', name: 'Orders' },
    { path: '/api/addresses', name: 'Addresses' }
  ];
  
  for (const route of routes) {
    const response = await makeRequest(route.path);
    
    if (response.status === 200 && Array.isArray(response.data) && response.data.length > 0) {
      log('yellow', `‚ö†Ô∏è  ${route.name}: Lista completa acess√≠vel (${response.data.length} itens)`);
      
      // Verificar se cont√©m dados sens√≠veis
      if (route.name === 'Customers' || route.name === 'Orders') {
        log('red', `‚ùå VULNERABILIDADE: Dados sens√≠veis em ${route.name} expostos!`);
        vulnerabilities.push(`${route.name} enumeration possible - sensitive data exposed`);
      } else {
        log('green', `‚úÖ ${route.name}: Dados p√∫blicos apenas`);
      }
    } else {
      log('green', `‚úÖ ${route.name}: Protegido ou vazio`);
    }
  }
  
  return vulnerabilities;
}

// üìä RELAT√ìRIO FINAL
async function generateAccessSecurityReport() {
  log('bold', '\n' + '='.repeat(70));
  log('bold', 'üîç AUDITORIA DE VULNERABILIDADES DE ACESSO E AUTORIZA√á√ÉO');
  log('bold', '='.repeat(70));
  
  const allVulnerabilities = [];
  
  // Executar todos os testes
  const tests = [
    { name: 'Detalhes de Pedidos', test: testOrderDetailsAccess },
    { name: 'Pedidos por N√∫mero', test: testOrderByNumberAccess },
    { name: 'Dados de Clientes', test: testCustomerDataAccess },
    { name: 'Endere√ßos', test: testAddressAccess },
    { name: 'Hist√≥rico de Status', test: testOrderHistoryAccess },
    { name: 'Rotas Administrativas', test: testAdminAccess },
    { name: 'Enumera√ß√£o de Dados', test: testDataEnumeration }
  ];
  
  for (const { name, test } of tests) {
    try {
      const vulnerabilities = await test();
      allVulnerabilities.push(...vulnerabilities);
    } catch (error) {
      log('red', `‚ùå Erro no teste ${name}: ${error.message}`);
    }
  }
  
  // Resumo final
  log('bold', '\nüìã RESUMO DE VULNERABILIDADES ENCONTRADAS:');
  
  if (allVulnerabilities.length === 0) {
    log('green', 'üéâ NENHUMA VULNERABILIDADE DE ACESSO ENCONTRADA!');
    log('green', '‚úÖ Sistema est√° bem protegido contra acesso n√£o autorizado');
  } else {
    log('red', `‚ö†Ô∏è  ${allVulnerabilities.length} VULNERABILIDADES ENCONTRADAS:`);
    allVulnerabilities.forEach((vuln, index) => {
      log('red', `${index + 1}. ${vuln}`);
    });
  }
  
  log('bold', '\nüéØ RECOMENDA√á√ïES:');
  
  if (allVulnerabilities.length > 0) {
    log('yellow', '1. Implementar middleware de autentica√ß√£o');
    log('yellow', '2. Validar propriedade dos recursos (usu√°rio s√≥ acessa seus dados)');
    log('yellow', '3. Implementar controle de acesso baseado em fun√ß√£o (RBAC)');
    log('yellow', '4. Proteger todas as rotas sens√≠veis');
  } else {
    log('green', '1. Sistema est√° bem protegido');
    log('green', '2. Manter pr√°ticas de seguran√ßa atuais');
    log('green', '3. Realizar auditorias regulares');
  }
  
  log('bold', '\n' + '='.repeat(70));
  
  return allVulnerabilities;
}

// Executar auditoria
generateAccessSecurityReport().catch(console.error);