// üõ°Ô∏è TESTE DE VALIDA√á√ÉO DE SEGURAN√áA
// Este script testa especificamente se a corre√ß√£o de seguran√ßa est√° funcionando

async function testSecurityValidation() {
    console.log('üõ°Ô∏è TESTANDO VALIDA√á√ÉO DE SEGURAN√áA DO KITRUNNER');
    console.log('üìç Certifique-se de estar na p√°gina de pagamento');
    
    // Fun√ß√£o para testar API diretamente
    async function testDirectAPI() {
        console.log('\nüéØ TESTE 1: Tentativa de manipula√ß√£o via API direta');
        
        try {
            // Pegar token de autentica√ß√£o atual
            const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');
            if (!token) {
                console.log('‚ùå Token de autentica√ß√£o n√£o encontrado. Fa√ßa login primeiro.');
                return;
            }
            
            // Teste com valor manipulado
            const maliciousPayload = {
                orderId: "KR2025123456",
                amount: 0.01, // Valor extremamente baixo
                email: "test@example.com",
                customerName: "Teste Hacker",
                cpf: "11122233344"
            };
            
            console.log('üö® Enviando payload malicioso:', maliciousPayload);
            
            // Testar rota PIX
            const pixResponse = await fetch('/api/mercadopago/create-pix-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(maliciousPayload)
            });
            
            const pixResult = await pixResponse.json();
            
            if (pixResponse.ok) {
                console.log('üö® VULNERABILIDADE DETECTADA: PIX processado com valor manipulado!');
                console.log('Resposta:', pixResult);
            } else {
                console.log('‚úÖ SEGURAN√áA OK: PIX rejeitado como esperado');
                console.log('Erro:', pixResult.message);
                
                if (pixResult.code === 'PRICE_VALIDATION_FAILED') {
                    console.log('üõ°Ô∏è Valida√ß√£o de pre√ßo funcionando corretamente!');
                }
            }
            
        } catch (error) {
            console.log('‚ùå Erro no teste de API:', error.message);
        }
    }
    
    // Fun√ß√£o para testar manipula√ß√£o do frontend
    function testFrontendManipulation() {
        console.log('\nüéØ TESTE 2: Manipula√ß√£o de dados do frontend');
        
        // Procurar formul√°rios de pagamento
        const paymentForms = document.querySelectorAll('form, [data-testid*="payment"], [class*="payment"]');
        console.log(`üîç Encontrados ${paymentForms.length} formul√°rios de pagamento`);
        
        // Procurar inputs relacionados a pre√ßos
        const priceInputs = document.querySelectorAll(
            'input[name*="amount"], input[name*="price"], input[name*="total"], ' +
            'input[value*="R$"], [data-testid*="amount"], [data-testid*="price"]'
        );
        
        console.log(`üîç Encontrados ${priceInputs.length} campos de pre√ßo`);
        
        priceInputs.forEach((input, index) => {
            console.log(`üìã Campo ${index + 1}:`, {
                name: input.name,
                value: input.value,
                type: input.type,
                id: input.id
            });
            
            // Tentar modificar
            const originalValue = input.value;
            input.value = '0.01';
            
            if (input.value === '0.01') {
                console.log(`üö® Campo ${index + 1} foi modificado com sucesso!`);
            } else {
                console.log(`‚úÖ Campo ${index + 1} protegido contra modifica√ß√£o`);
            }
            
            // Restaurar valor original
            input.value = originalValue;
        });
    }
    
    // Fun√ß√£o para verificar estado do React
    function checkReactState() {
        console.log('\nüéØ TESTE 3: Verificando estado React/vari√°veis globais');
        
        // Vari√°veis suspeitas
        const suspiciousVars = [
            'pricing', 'totalCost', 'amount', 'paymentData', 
            'orderData', 'cart', 'checkout', 'price'
        ];
        
        suspiciousVars.forEach(varName => {
            if (window[varName]) {
                console.log(`üéØ Vari√°vel global encontrada: ${varName}`);
                console.log('Valor:', window[varName]);
                
                // Tentar modificar
                if (typeof window[varName] === 'object' && window[varName].totalCost) {
                    const original = window[varName].totalCost;
                    window[varName].totalCost = 0.01;
                    console.log(`üö® Modificado ${varName}.totalCost de ${original} para 0.01`);
                }
            }
        });
        
        // Verificar React DevTools
        if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
            console.log('‚öõÔ∏è React DevTools detectado - estado pode ser modific√°vel');
        }
    }
    
    // Fun√ß√£o para monitorar requisi√ß√µes de rede
    function monitorNetworkRequests() {
        console.log('\nüéØ TESTE 4: Monitorando requisi√ß√µes de rede');
        
        // Verificar se j√° existe interceptador
        if (window._securityTestInterceptor) {
            console.log('‚ÑπÔ∏è Interceptador j√° ativo');
            return;
        }
        
        const originalFetch = window.fetch;
        window._securityTestInterceptor = true;
        
        window.fetch = function(...args) {
            const url = args[0];
            const options = args[1] || {};
            
            if (url.includes('payment') || url.includes('order')) {
                console.log('üì° INTERCEPTADO: Requisi√ß√£o de pagamento');
                console.log('URL:', url);
                
                if (options.body) {
                    try {
                        const body = JSON.parse(options.body);
                        console.log('üìã Dados enviados:', body);
                        
                        // Verificar se h√° campos de pre√ßo
                        const priceFields = ['amount', 'totalCost', 'price', 'total'];
                        priceFields.forEach(field => {
                            if (body[field] !== undefined) {
                                console.log(`üí∞ Campo de pre√ßo detectado: ${field} = ${body[field]}`);
                            }
                        });
                        
                    } catch (e) {
                        console.log('üìã Body n√£o √© JSON:', options.body);
                    }
                }
            }
            
            return originalFetch.apply(this, args);
        };
        
        console.log('‚úÖ Interceptador de rede ativado');
        console.log('üéØ Agora tente fazer um pagamento e observe os logs');
    }
    
    // Executar todos os testes
    console.log('üöÄ Iniciando bateria de testes de seguran√ßa...\n');
    
    await testDirectAPI();
    testFrontendManipulation();
    checkReactState();
    monitorNetworkRequests();
    
    console.log('\nüìä RESUMO DOS TESTES:');
    console.log('1. ‚úì Teste de API direta executado');
    console.log('2. ‚úì Teste de manipula√ß√£o frontend executado');  
    console.log('3. ‚úì Verifica√ß√£o de estado React executada');
    console.log('4. ‚úì Monitor de rede ativado');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('1. Tente fazer um pagamento normalmente');
    console.log('2. Observe se alguma manipula√ß√£o passou despercebida');
    console.log('3. Verifique os logs do servidor para confirma√ß√£o');
    
    console.log('\nüîç INTERPRETA√á√ÉO DOS RESULTADOS:');
    console.log('‚úÖ SEGURO: Erros de valida√ß√£o, pagamentos rejeitados');
    console.log('üö® VULNER√ÅVEL: Pagamentos processados com valores alterados');
}

// Fun√ß√£o para limpar testes
function cleanupSecurityTests() {
    if (window._securityTestInterceptor && window.originalFetch) {
        window.fetch = window.originalFetch;
        delete window._securityTestInterceptor;
        console.log('üßπ Interceptador removido');
    }
}

// Fun√ß√£o para relat√≥rio de seguran√ßa
function generateSecurityReport() {
    console.log('\nüìã RELAT√ìRIO DE SEGURAN√áA - KITRUNNER');
    console.log('='.repeat(50));
    console.log('Data:', new Date().toLocaleString());
    console.log('URL:', window.location.href);
    console.log('User Agent:', navigator.userAgent);
    
    console.log('\nüîç PONTOS VERIFICADOS:');
    console.log('‚úì Manipula√ß√£o de vari√°veis JavaScript globais');
    console.log('‚úì Intercepta√ß√£o de requisi√ß√µes HTTP');
    console.log('‚úì Modifica√ß√£o de campos de formul√°rio');
    console.log('‚úì Altera√ß√£o de dados no sessionStorage/localStorage');
    console.log('‚úì Teste de API com payloads maliciosos');
    
    console.log('\nüõ°Ô∏è MEDIDAS DE PROTE√á√ÉO ESPERADAS:');
    console.log('‚Ä¢ Valida√ß√£o server-side de todos os pre√ßos');
    console.log('‚Ä¢ Rejei√ß√£o de valores manipulados');
    console.log('‚Ä¢ Rec√°lculo autom√°tico no backend');
    console.log('‚Ä¢ Logs de seguran√ßa para auditoria');
}

// Executar automaticamente
console.log('üõ°Ô∏è CARREGANDO TESTES DE SEGURAN√áA...');
console.log('Execute testSecurityValidation() para iniciar os testes');
console.log('Execute cleanupSecurityTests() para limpar ap√≥s os testes');
console.log('Execute generateSecurityReport() para gerar relat√≥rio');

// Auto-executar se estivermos na p√°gina de pagamento
if (window.location.pathname.includes('payment')) {
    console.log('üìç P√°gina de pagamento detectada - executando testes automaticamente');
    setTimeout(testSecurityValidation, 1000);
}